{"version":3,"sources":["Card.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js","mars-rover.svg"],"names":["Card","props","react_default","a","createElement","className","src","patch_url","alt","number","name","date","site","Header","rover","Footer","App","state","data","_this2","this","fetch","then","responce","json","responceData","setState","catch","error","console","log","filteredData","filter","d","upcoming","src_Header","map","element","index","src_Card","key","links","mission_patch_small","flight_number","mission_name","year","launch_year","launch_date_local","launch_site","site_name_long","details","src_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oMA6BeA,EA3BF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,UAAWF,UAAU,QAAQG,IAAI,kBACjDN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaJ,EAAMQ,SAErCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,SAIEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeJ,EAAMS,MAErCR,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,cAPF,IAOsDJ,EAAMU,KAC1DT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAhB,aATF,IASoDJ,EAAMW,yBCPnDC,EATA,SAAAZ,GACb,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,gBACAH,EAAAC,EAAAC,cAAA,OAAKE,IAAKQ,IAAON,IAAI,aAAaH,UAAU,sBCGnCU,EARA,SAAAd,GACb,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,oDCmDSY,6MAlDbC,MAAQ,CACNC,KAAM,uFAGY,IAAAC,EAAAC,KAClBC,MAAM,0CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAY,OAChBN,EAAKO,SAAS,CACZR,KAAMO,MAGTE,MAAM,SAAAC,GACLC,QAAQC,IAAI,qCAAsCF,sCAStD,IAAIG,EAAeX,KAAKH,MAAMC,KAAKc,OAAO,SAAAC,GACxC,OAAsB,IAAfA,EAAEC,WAGX,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEZ0B,EAAaK,IAAI,SAACC,EAASC,GAAV,OAChBpC,EAAAC,EAAAC,cAACmC,EAAD,CACEC,IAAKF,EACL/B,UAAW8B,EAAQI,MAAMC,oBACzBjC,OAAQ4B,EAAQM,cAChBjC,KAAM2B,EAAQO,aACdC,KAAMR,EAAQS,YACdnC,KAAM0B,EAAQU,kBACdnC,KAAMyB,EAAQW,YAAYC,eAC1BC,QAASb,EAAQa,aAIvBhD,EAAAC,EAAAC,cAAC+C,EAAD,cA7CUC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f1f3a337.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = props => {\n  return (\n    <div className=\"main-card\">\n      <div className=\"card-img \">\n        <img src={props.patch_url} className=\"patch\" alt=\"mission patch\" />\n        <span className=\"flight-no\">{props.number}</span>\n      </div>\n      <div className=\"card-details\">\n        <p>\n          {/* <span className=\"flight-no\">{props.number}</span> */}\n          {/* <br /> */}\n          {/* Flight Name: {props.name} */}\n          <span className=\"flight-name\">{props.name}</span>\n          {/* {props.year} */}\n          <br />\n          <span className=\"card-date-time\">Date/Time:</span> {props.date}\n          <br />\n          <span className=\"card-location\">Location:</span> {props.site}\n          {/* <br /> */}\n          {/* Details: {props.details} */}\n        </p>\n      </div>\n      {/* <hr /> */}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport rover from \"./mars-rover.svg\";\n\nconst Header = props => {\n  return (\n    <header className=\"main-header\">\n      <h1 className=\"name\">SpaceX - API</h1>\n      <img src={rover} alt=\"mars rover\" className=\"main-header-img\" />\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = props => {\n  return (\n    <footer className=\"main-footer\">\n      <span>&copy;2019 Unofficial SpaceX Website</span>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nclass App extends Component {\n  state = {\n    data: []\n  };\n\n  componentDidMount() {\n    fetch(\"https://api.spacexdata.com/v3/launches\")\n      .then(responce => responce.json())\n      .then(responceData =>\n        this.setState({\n          data: responceData\n        })\n      )\n      .catch(error => {\n        console.log(\"Error fetching and parsing data...\", error);\n      });\n  }\n\n  render() {\n    // this.state.data.map((element, index) =>\n    //   console.log(this.state.data[index].upcoming)\n    // );\n\n    let filteredData = this.state.data.filter(d => {\n      return d.upcoming === false;\n    });\n\n    return (\n      <div className=\"wrapper\">\n        <Header />\n        <div className=\"container\">\n          {/* {this.state.data.map((element, index) => ( */}\n          {filteredData.map((element, index) => (\n            <Card\n              key={index}\n              patch_url={element.links.mission_patch_small}\n              number={element.flight_number}\n              name={element.mission_name}\n              year={element.launch_year}\n              date={element.launch_date_local}\n              site={element.launch_site.site_name_long}\n              details={element.details}\n            />\n          ))}\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mars-rover.d0300d2b.svg\";"],"sourceRoot":""}